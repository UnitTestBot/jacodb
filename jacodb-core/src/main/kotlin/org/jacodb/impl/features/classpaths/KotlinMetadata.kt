/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.jacodb.impl.features.classpaths

import kotlin.metadata.KmConstructor
import kotlin.metadata.KmFunction
import kotlin.metadata.KmProperty
import kotlin.metadata.KmTypeParameter
import kotlin.metadata.jvm.KotlinClassMetadata
import org.jacodb.api.jvm.JcClassExtFeature
import org.jacodb.api.jvm.JcClassOrInterface
import org.jacodb.api.jvm.ext.annotation

object KotlinMetadata : JcClassExtFeature {

    const val METADATA_KEY = "kotlinClassMetadata"

    override fun extensionValuesOf(clazz: JcClassOrInterface): Map<String, Any>? {
        val kMetadata = clazz.kMetadata
        if (kMetadata != null) {
            return mapOf(METADATA_KEY to KotlinMetadataHolder(kMetadata))
        }

        return null
    }

    /**
     * Returns [KotlinClassMetadata] instance for the class if it was generated by Kotlin.
     * See docs for [Metadata] for more info on how it is represented in bytecode and what it contains.
     */
    @Suppress("UNCHECKED_CAST")
    private val JcClassOrInterface.kMetadata: KotlinClassMetadata?
        get() {
            val kmParameters = annotation("kotlin.Metadata")?.values ?: return null
            val metadata = kotlin.metadata.jvm.Metadata(
                kmParameters["k"] as? Int,
                (kmParameters["mv"] as? List<Int>)?.toIntArray(),
                (kmParameters["d1"] as? List<String>)?.toTypedArray(),
                (kmParameters["d2"] as? List<String>)?.toTypedArray(),
                kmParameters["xs"] as? String,
                kmParameters["pn"] as? String,
                kmParameters["xi"] as? Int,
            )
            return KotlinClassMetadata.readStrict(metadata)
        }

}

class KotlinMetadataHolder(meta: KotlinClassMetadata) {

    val functions: List<KmFunction> = when (meta) {
        is KotlinClassMetadata.Class -> meta.kmClass.functions
        is KotlinClassMetadata.FileFacade -> meta.kmPackage.functions
        is KotlinClassMetadata.MultiFileClassPart -> meta.kmPackage.functions
        else -> listOf()
    }

    val constructors: List<KmConstructor> =
        (meta as? KotlinClassMetadata.Class)?.kmClass?.constructors ?: emptyList()

    val properties: List<KmProperty> = when (meta) {
        is KotlinClassMetadata.Class -> meta.kmClass.properties
        is KotlinClassMetadata.FileFacade -> meta.kmPackage.properties
        is KotlinClassMetadata.MultiFileClassPart -> meta.kmPackage.properties
        else -> listOf()
    }

    val kmTypeParameters: List<KmTypeParameter>? =
        (meta as? KotlinClassMetadata.Class)?.kmClass?.typeParameters
}
