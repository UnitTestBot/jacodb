/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.jacodb.impl.storage.jooq.tables.records


import org.jacodb.impl.storage.jooq.tables.Annotationvalues
import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record8
import org.jooq.Row8
import org.jooq.impl.UpdatableRecordImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class AnnotationvaluesRecord() : UpdatableRecordImpl<AnnotationvaluesRecord>(Annotationvalues.ANNOTATIONVALUES), Record8<Long?, Long?, String?, Long?, Int?, String?, Long?, Long?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var annotationId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var name: String?
        set(value) = set(2, value)
        get() = get(2) as String?

    var refAnnotationId: Long?
        set(value) = set(3, value)
        get() = get(3) as Long?

    var kind: Int?
        set(value) = set(4, value)
        get() = get(4) as Int?

    var value: String?
        set(value) = set(5, value)
        get() = get(5) as String?

    var classSymbol: Long?
        set(value) = set(6, value)
        get() = get(6) as Long?

    var enumValue: Long?
        set(value) = set(7, value)
        get() = get(7) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row8<Long?, Long?, String?, Long?, Int?, String?, Long?, Long?> = super.fieldsRow() as Row8<Long?, Long?, String?, Long?, Int?, String?, Long?, Long?>
    override fun valuesRow(): Row8<Long?, Long?, String?, Long?, Int?, String?, Long?, Long?> = super.valuesRow() as Row8<Long?, Long?, String?, Long?, Int?, String?, Long?, Long?>
    override fun field1(): Field<Long?> = Annotationvalues.ANNOTATIONVALUES.ID
    override fun field2(): Field<Long?> = Annotationvalues.ANNOTATIONVALUES.ANNOTATION_ID
    override fun field3(): Field<String?> = Annotationvalues.ANNOTATIONVALUES.NAME
    override fun field4(): Field<Long?> = Annotationvalues.ANNOTATIONVALUES.REF_ANNOTATION_ID
    override fun field5(): Field<Int?> = Annotationvalues.ANNOTATIONVALUES.KIND
    override fun field6(): Field<String?> = Annotationvalues.ANNOTATIONVALUES.VALUE
    override fun field7(): Field<Long?> = Annotationvalues.ANNOTATIONVALUES.CLASS_SYMBOL
    override fun field8(): Field<Long?> = Annotationvalues.ANNOTATIONVALUES.ENUM_VALUE
    override fun component1(): Long? = id
    override fun component2(): Long? = annotationId
    override fun component3(): String? = name
    override fun component4(): Long? = refAnnotationId
    override fun component5(): Int? = kind
    override fun component6(): String? = value
    override fun component7(): Long? = classSymbol
    override fun component8(): Long? = enumValue
    override fun value1(): Long? = id
    override fun value2(): Long? = annotationId
    override fun value3(): String? = name
    override fun value4(): Long? = refAnnotationId
    override fun value5(): Int? = kind
    override fun value6(): String? = value
    override fun value7(): Long? = classSymbol
    override fun value8(): Long? = enumValue

    override fun value1(value: Long?): AnnotationvaluesRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): AnnotationvaluesRecord {
        this.annotationId = value
        return this
    }

    override fun value3(value: String?): AnnotationvaluesRecord {
        this.name = value
        return this
    }

    override fun value4(value: Long?): AnnotationvaluesRecord {
        this.refAnnotationId = value
        return this
    }

    override fun value5(value: Int?): AnnotationvaluesRecord {
        this.kind = value
        return this
    }

    override fun value6(value: String?): AnnotationvaluesRecord {
        this.value = value
        return this
    }

    override fun value7(value: Long?): AnnotationvaluesRecord {
        this.classSymbol = value
        return this
    }

    override fun value8(value: Long?): AnnotationvaluesRecord {
        this.enumValue = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: String?, value4: Long?, value5: Int?, value6: String?, value7: Long?, value8: Long?): AnnotationvaluesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        this.value4(value4)
        this.value5(value5)
        this.value6(value6)
        this.value7(value7)
        this.value8(value8)
        return this
    }

    /**
     * Create a detached, initialised AnnotationvaluesRecord
     */
    constructor(id: Long? = null, annotationId: Long? = null, name: String? = null, refAnnotationId: Long? = null, kind: Int? = null, value: String? = null, classSymbol: Long? = null, enumValue: Long? = null): this() {
        this.id = id
        this.annotationId = annotationId
        this.name = name
        this.refAnnotationId = refAnnotationId
        this.kind = kind
        this.value = value
        this.classSymbol = classSymbol
        this.enumValue = enumValue
    }
}
