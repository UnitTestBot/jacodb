/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.jacodb.impl.storage.ers.jooq.tables


import kotlin.collections.List

import org.jacodb.impl.storage.ers.jooq.DefaultSchema
import org.jacodb.impl.storage.ers.jooq.keys.PK_TYPES
import org.jacodb.impl.storage.ers.jooq.tables.records.TypesRecord
import org.jooq.Field
import org.jooq.ForeignKey
import org.jooq.Name
import org.jooq.Record
import org.jooq.Row2
import org.jooq.Schema
import org.jooq.Table
import org.jooq.TableField
import org.jooq.TableOptions
import org.jooq.UniqueKey
import org.jooq.impl.DSL
import org.jooq.impl.Internal
import org.jooq.impl.SQLDataType
import org.jooq.impl.TableImpl


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class Types(
    alias: Name,
    child: Table<out Record>?,
    path: ForeignKey<out Record, TypesRecord>?,
    aliased: Table<TypesRecord>?,
    parameters: Array<Field<*>?>?
): TableImpl<TypesRecord>(
    alias,
    DefaultSchema.DEFAULT_SCHEMA,
    child,
    path,
    aliased,
    parameters,
    DSL.comment(""),
    TableOptions.table()
) {
    companion object {

        /**
         * The reference instance of <code>Types</code>
         */
        val TYPES = Types()
    }

    /**
     * The class holding records for this type
     */
    override fun getRecordType(): Class<TypesRecord> = TypesRecord::class.java

    /**
     * The column <code>Types.id</code>.
     */
    val ID: TableField<TypesRecord, Int?> = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "")

    /**
     * The column <code>Types.name</code>.
     */
    val NAME: TableField<TypesRecord, String?> = createField(DSL.name("name"), SQLDataType.CLOB.nullable(false), this, "")

    private constructor(alias: Name, aliased: Table<TypesRecord>?): this(alias, null, null, aliased, null)
    private constructor(alias: Name, aliased: Table<TypesRecord>?, parameters: Array<Field<*>?>?): this(alias, null, null, aliased, parameters)

    /**
     * Create an aliased <code>Types</code> table reference
     */
    constructor(alias: String): this(DSL.name(alias))

    /**
     * Create an aliased <code>Types</code> table reference
     */
    constructor(alias: Name): this(alias, null)

    /**
     * Create a <code>Types</code> table reference
     */
    constructor(): this(DSL.name("Types"), null)

    constructor(child: Table<out Record>, key: ForeignKey<out Record, TypesRecord>): this(Internal.createPathAlias(child, key), child, key, TYPES, null)
    override fun getSchema(): Schema = DefaultSchema.DEFAULT_SCHEMA
    override fun getPrimaryKey(): UniqueKey<TypesRecord> = PK_TYPES
    override fun getKeys(): List<UniqueKey<TypesRecord>> = listOf(PK_TYPES)
    override fun `as`(alias: String): Types = Types(DSL.name(alias), this)
    override fun `as`(alias: Name): Types = Types(alias, this)

    /**
     * Rename this table
     */
    override fun rename(name: String): Types = Types(DSL.name(name), null)

    /**
     * Rename this table
     */
    override fun rename(name: Name): Types = Types(name, null)

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------
    override fun fieldsRow(): Row2<Int?, String?> = super.fieldsRow() as Row2<Int?, String?>
}
