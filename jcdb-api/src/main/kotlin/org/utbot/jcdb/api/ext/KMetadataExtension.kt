/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.utbot.jcdb.api.ext

import kotlinx.metadata.Flag
import kotlinx.metadata.KmConstructor
import kotlinx.metadata.KmFunction
import kotlinx.metadata.KmType
import kotlinx.metadata.KmValueParameter
import kotlinx.metadata.jvm.KotlinClassHeader
import kotlinx.metadata.jvm.KotlinClassMetadata
import kotlinx.metadata.jvm.signature
import org.utbot.jcdb.api.JcClassOrInterface
import org.utbot.jcdb.api.JcMethod
import org.utbot.jcdb.api.JcParameter

/**
 * Returns [KotlinClassMetadata] instance for the class if it was generated by Kotlin.
 * See docs for [Metadata] for more info on how it is represented in bytecode and what it contains.
 */
@Suppress("UNCHECKED_CAST")
val JcClassOrInterface.kMetadata: KotlinClassMetadata?
    get() {
        val kmParameters = annotations.firstOrNull { it.matches("kotlin.Metadata") }?.values ?: return null
        val kmHeader = KotlinClassHeader(
            kmParameters["k"] as? Int,
            (kmParameters["mv"] as? List<Int>)?.toIntArray(),
            (kmParameters["d1"] as? List<String>)?.toTypedArray(),
            (kmParameters["d2"] as? List<String>)?.toTypedArray(),
            kmParameters["xs"] as? String,
            kmParameters["pn"] as? String,
            kmParameters["xi"] as? Int,
        )
        return KotlinClassMetadata.read(kmHeader)
    }

val JcMethod.kmFunction: KmFunction?
    get() =
        enclosingClass.kMetadata?.functions?.firstOrNull { it.signature?.name == name && it.signature?.desc == description }

val JcMethod.kmConstructor: KmConstructor?
    get() =
        enclosingClass.kMetadata?.constructors?.firstOrNull { it.signature?.name == name && it.signature?.desc == description }

val JcParameter.kmParameter: KmValueParameter?
    get() {
        method.kmFunction?.let {
            // Shift needed to properly handle extension functions
            val shift = if (it.receiverParameterType != null) 1 else 0

            if (index - shift < 0)
                return null

            return it.valueParameters[index - shift]
        }

        return method.kmConstructor?.let {
            it.valueParameters[index]
        }
    }

private val KotlinClassMetadata.functions: List<KmFunction>
    get() =
        when(this) {
            is KotlinClassMetadata.Class -> toKmClass().functions
            is KotlinClassMetadata.FileFacade -> toKmPackage().functions
            is KotlinClassMetadata.MultiFileClassPart -> toKmPackage().functions
            else -> listOf()
        }

private val KotlinClassMetadata.constructors: List<KmConstructor>
    get() = (this as? KotlinClassMetadata.Class)?.toKmClass()?.constructors ?: emptyList()

val KmType.isNullable: Boolean
    get() = Flag.Type.IS_NULLABLE(flags)