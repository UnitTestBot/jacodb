/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.jacodb.analysis.ifds.sarif

import io.github.detekt.sarif4k.Level
import org.jacodb.analysis.ifds.npe.NpeVulnerability
import org.jacodb.analysis.ifds.result.EagerTraceGraph
import org.jacodb.analysis.ifds.result.TraceGraph
import org.jacodb.analysis.ifds.taint.TaintDomainFact
import org.jacodb.analysis.ifds.taint.TaintVulnerability
import org.jacodb.analysis.ifds.unused.UnusedVariableDomainFact
import org.jacodb.analysis.ifds.unused.UnusedVulnerability
import org.jacodb.api.cfg.JcInst

data class VulnerabilityInstance<Stmt, Fact>(
    val traceGraph: TraceGraph<Stmt, Fact>,
    val description: VulnerabilityDescription,
)

data class VulnerabilityDescription(
    val ruleId: String?,
    val message: String?,
    val level: Level = Level.Warning,
)

fun UnusedVulnerability.toSarif(): VulnerabilityInstance<JcInst, UnusedVariableDomainFact> {
    return VulnerabilityInstance(
        EagerTraceGraph(vertex, mutableSetOf(vertex), mutableMapOf()),
        VulnerabilityDescription(ruleId = null, message = message)
    )
}

fun TaintVulnerability.toSarif(
    graph: TraceGraph<JcInst, TaintDomainFact>,
): VulnerabilityInstance<JcInst, TaintDomainFact> {
    return VulnerabilityInstance(
        graph,
        VulnerabilityDescription(
            ruleId = null,
            message = this.rule?.ruleNote
        )
    )
}

fun NpeVulnerability.toSarif(
    graph: TraceGraph<JcInst, TaintDomainFact>,
): VulnerabilityInstance<JcInst, TaintDomainFact> {
    return VulnerabilityInstance(
        graph,
        VulnerabilityDescription(
            ruleId = null,
            message = this.rule?.ruleNote
        )
    )
}
