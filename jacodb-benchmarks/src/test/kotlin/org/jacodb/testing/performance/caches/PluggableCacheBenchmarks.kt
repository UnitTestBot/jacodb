/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

package org.jacodb.testing.performance.caches

import kotlinx.benchmark.Blackhole
import org.jacodb.impl.ValueStoreType
import org.jacodb.impl.caches.PluggableCache
import org.jacodb.impl.caches.xodus.XODUS_CACHE_PROVIDER_ID
import org.openjdk.jmh.annotations.Benchmark
import org.openjdk.jmh.annotations.BenchmarkMode
import org.openjdk.jmh.annotations.Fork
import org.openjdk.jmh.annotations.Level
import org.openjdk.jmh.annotations.Measurement
import org.openjdk.jmh.annotations.Mode
import org.openjdk.jmh.annotations.OutputTimeUnit
import org.openjdk.jmh.annotations.Scope
import org.openjdk.jmh.annotations.Setup
import org.openjdk.jmh.annotations.State
import org.openjdk.jmh.annotations.Threads
import org.openjdk.jmh.annotations.Warmup
import java.security.SecureRandom
import java.util.concurrent.TimeUnit

private const val CACHE_SIZE = 2_000_000

@Threads(1)
@OutputTimeUnit(TimeUnit.NANOSECONDS)
@BenchmarkMode(Mode.AverageTime)
@Fork(
    value = 1,
    jvmArgs = ["-Xms1g", "-Xmx1g"]
)
@Warmup(time = 2)
@Measurement(time = 2)
@State(Scope.Benchmark)
abstract class PluggableCacheBenchmarks {

    abstract val cacheProviderId: String

    var cache = dummyCache
    var softCache = dummyCache
    var keys = intArrayOf()
    var missingKeys = intArrayOf()
    var i = 0

    @Setup(Level.Iteration)
    fun createCaches() {
        cache = PluggableCache.of(cacheProviderId) {
            maximumSize = CACHE_SIZE
        }
        softCache = PluggableCache.of(cacheProviderId) {
            maximumSize = CACHE_SIZE
            valueRefType = ValueStoreType.SOFT
        }
        val rnd = SecureRandom()
        keys = IntArray(CACHE_SIZE / 3) {
            rnd.nextInt() and 0x7fffffff
        }
        // Looks like subsequent values generated by the same Random instance wouldn't give a duplicate.
        // For congruent generator, a duplicate would mean a cycle, i.e. cycle with quite a short period.
        missingKeys = IntArray(CACHE_SIZE) {
            rnd.nextInt() and 0x7fffffff
        }
        keys.forEach { key -> cache[key] = key.toString() }
        i = 0
    }

    @Benchmark
    fun getHit(blackHole: Blackhole) {
        val key = keys[i]
        blackHole.consume(cache[key].also { i = key % keys.size })
    }

    @Benchmark
    fun getMiss(blackHole: Blackhole) {
        val key = missingKeys[i]
        blackHole.consume(cache[key].also { i = key % missingKeys.size })
    }

    @Benchmark
    fun getSoftHit(blackHole: Blackhole) {
        val key = keys[i]
        blackHole.consume(softCache[key].also { i = key % keys.size })
    }

    @Benchmark
    fun getSoftMiss(blackHole: Blackhole) {
        val key = missingKeys[i]
        blackHole.consume(softCache[key].also { i = key % missingKeys.size })
    }

    private companion object {

        private val dummyCache: PluggableCache<Int, String> =
            PluggableCache.of(XODUS_CACHE_PROVIDER_ID) {
                maximumSize = CACHE_SIZE
            }
    }
}