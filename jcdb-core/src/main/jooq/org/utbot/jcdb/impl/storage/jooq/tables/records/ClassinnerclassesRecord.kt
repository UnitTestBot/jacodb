/*
 *  Copyright 2022 UnitTestBot contributors (utbot.org)
 * <p>
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 * <p>
 *  http://www.apache.org/licenses/LICENSE-2.0
 * <p>
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

/*
 * This file is generated by jOOQ.
 */
package org.utbot.jcdb.impl.storage.jooq.tables.records


import org.jooq.Field
import org.jooq.Record1
import org.jooq.Record3
import org.jooq.Row3
import org.jooq.impl.UpdatableRecordImpl
import org.utbot.jcdb.impl.storage.jooq.tables.Classinnerclasses


/**
 * This class is generated by jOOQ.
 */
@Suppress("UNCHECKED_CAST")
open class ClassinnerclassesRecord() : UpdatableRecordImpl<ClassinnerclassesRecord>(Classinnerclasses.CLASSINNERCLASSES), Record3<Long?, Long?, Long?> {

    var id: Long?
        set(value) = set(0, value)
        get() = get(0) as Long?

    var classId: Long?
        set(value) = set(1, value)
        get() = get(1) as Long?

    var innerClassId: Long?
        set(value) = set(2, value)
        get() = get(2) as Long?

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    override fun key(): Record1<Long?> = super.key() as Record1<Long?>

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    override fun fieldsRow(): Row3<Long?, Long?, Long?> = super.fieldsRow() as Row3<Long?, Long?, Long?>
    override fun valuesRow(): Row3<Long?, Long?, Long?> = super.valuesRow() as Row3<Long?, Long?, Long?>
    override fun field1(): Field<Long?> = Classinnerclasses.CLASSINNERCLASSES.ID
    override fun field2(): Field<Long?> = Classinnerclasses.CLASSINNERCLASSES.CLASS_ID
    override fun field3(): Field<Long?> = Classinnerclasses.CLASSINNERCLASSES.INNER_CLASS_ID
    override fun component1(): Long? = id
    override fun component2(): Long? = classId
    override fun component3(): Long? = innerClassId
    override fun value1(): Long? = id
    override fun value2(): Long? = classId
    override fun value3(): Long? = innerClassId

    override fun value1(value: Long?): ClassinnerclassesRecord {
        this.id = value
        return this
    }

    override fun value2(value: Long?): ClassinnerclassesRecord {
        this.classId = value
        return this
    }

    override fun value3(value: Long?): ClassinnerclassesRecord {
        this.innerClassId = value
        return this
    }

    override fun values(value1: Long?, value2: Long?, value3: Long?): ClassinnerclassesRecord {
        this.value1(value1)
        this.value2(value2)
        this.value3(value3)
        return this
    }

    /**
     * Create a detached, initialised ClassinnerclassesRecord
     */
    constructor(id: Long? = null, classId: Long? = null, innerClassId: Long? = null): this() {
        this.id = id
        this.classId = classId
        this.innerClassId = innerClassId
    }
}
